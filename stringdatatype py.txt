String Data Type

The most commonly used object in any project and in any programming language is String only.
Hence we should aware complete information about String data type.

What is String?
Any sequence of characters within either single quotes or double quotes is considered as a String.
Syntax:
s='durga'
s="durga"

Note: In most of other languges like C, C++,Java, a single character with in single quotes is treated
as char data type value. But in Python we are not having char data type.Hence it is treated as
String only.

Eg:
>>> ch='a'
>>> type(ch)
<class 'str'>
How to define multi-line String literals:
We can define multi-line String literals by using triple single or double quotes.

Eg:
>>> s='''durga
software
solutions'''
We can also use triple quotes to use single quotes or double quotes as symbol inside String literal.

Eg:
s='This is ' single quote symbol' ==>invalid
s='This is \' single quote symbol' ==>valid
s="This is ' single quote symbol"====>valid
s='This is " double quotes symbol' ==>valid
s='The "Python Notes" by 'durga' is very helpful' ==>invalid
s="The "Python Notes" by 'durga' is very helpful"==>invalid
s='The \"Python Notes\" by \'durga\' is very helpful' ==>valid
s='''The "Python Notes" by 'durga' is very helpful''' ==>valid

How to access characters of a String:
We can access characters of a string by using the following ways.
1. By using index
2. By using slice operator
1. By using index:
Python supports both +ve and -ve index.
+ve index means left to right(Forward direction)
-ve index means right to left(Backward direction)

Eg:
s='durga'
diagram

Eg:
>>> s='durga'
>>> s[0]
'd'
>>> s[4]
'a'
>>> s[-1]
'a'
>>> s[10]
IndexError: string index out of range

Note: If we are trying to access characters of a string with out of range index then we will get
error saying : IndexError

Q. Write a program to accept some string from the keyboard and display its characters by
index wise(both positive and nEgative index)
test.py:
1) s=input("Enter Some String:")
2) i=0
3) for x in s:
4) print("The character present at positive index {} and at nEgative index {} is {}".format(i,i
-len(s),x))
5) i=i+1
Output:
D:\python_classes>py test.py
Enter Some String:durga

The character present at positive index 0 and at nEgative index -5 is d
The character present at positive index 1 and at nEgative index -4 is u
The character present at positive index 2 and at nEgative index -3 is r
The character present at positive index 3 and at nEgative index -2 is g
The character present at positive index 4 and at nEgative index -1 is a

2. Accessing characters by using slice operator:
Syntax: s[bEginindex:endindex:step]
bEginindex:From where we have to consider slice(substring)
endindex: We have to terminate the slice(substring) at endindex-1
step: incremented value
Note: If we are not specifying bEgin index then it will consider from bEginning of the string.
If we are not specifying end index then it will consider up to end of the string
The default value for step is 1

Eg:
1) >>> s="Learning Python is very very easy!!!"
2) >>> s[1:7:1]
3) 'earnin'
4) >>> s[1:7]
5) 'earnin'
6) >>> s[1:7:2]
7) 'eri'
8) >>> s[:7]
9) 'Learnin'
10) >>> s[7:]
11) 'g Python is very very easy!!!'
12) >>> s[::]
13) 'Learning Python is very very easy!!!'
14) >>> s[:]
15) 'Learning Python is very very easy!!!'
16) >>> s[::-1]
17) '!!!ysae yrev yrev si nohtyP gninraeL'

Behaviour of slice operator:
s[bEgin:end:step]
step value can be either +ve or â€“ve
if +ve then it should be forward direction(left to right) and we have to consider bEgin to end-1
if -ve then it should be backward direction(right to left) and we have to consider bEgin to end+1

***Note:
In the backward direction if end value is -1 then result is always empty.
In the forward direction if end value is 0 then result is always empty.

In forward direction:
default value for bEgin: 0
default value for end: length of string
default value for step: +1

In backward direction:
default value for bEgin: -1
default value for end: -(length of string+1)
Note: Either forward or backward direction, we can take both +ve and -ve values for bEgin and
end index.

Mathematical Operators for String:
We can apply the following mathematical operators for Strings.
1. + operator for concatenation
2. * operator for repetition
print("durga"+"soft") #durgasoft
print("durga"*2) #durgadurga

Note:
1. To use + operator for Strings, compulsory both arguments should be str type
2. To use * operator for Strings, compulsory one argument should be str and other argument
should be int
len() in-built function:
We can use len() function to find the number of characters present in the string.

Eg:
s='durga'
print(len(s)) #5

Q. Write a program to access each character of string in forward and backward direction
by using while loop?
1) s="Learning Python is very easy !!!"
2) n=len(s)
3) i=0
4) print("Forward direction")
5) while i<n:
6) print(s[i],end=' ')
7) i +=1
8) print("Backward direction")
9) i=-1
10) while i>=-n:
11) print(s[i],end=' ')
12) i=i-1

Alternative ways:
1) s="Learning Python is very easy !!!"
2) print("Forward direction")
3) for i in s:
4) print(i,end=' ')
5)
6) print("Forward direction")
7) for i in s[::]:
8) print(i,end=' ')
9)
10) print("Backward direction")
11) for i in s[::-1]:
12) print(i,end=' ')

Checking Membership:
We can check whether the character or string is the member of another string or not by using in
and not in operators
s='durga'
print('d' in s) #True
print('z' in s) #False
Program:
1) s=input("Enter main string:")
2) subs=input("Enter sub string:")
3) if subs in s:
4) print(subs,"is found in main string")
5) else:

6) print(subs,"is not found in main string")
Output:
D:\python_classes>py test.py
Enter main string:durgasoftwaresolutions
Enter sub string:durga
durga is found in main string
D:\python_classes>py test.py
Enter main string:durgasoftwaresolutions
Enter sub string:python
python is not found in main string
Comparison of Strings:
We can use comparison operators (<,<=,>,>=) and equality operators(==,!=) for strings.
Comparison will be performed based on alphabetical order.
Eg:
1) s1=input("Enter first string:")
2) s2=input("Enter Second string:")
3) if s1==s2:
4) print("Both strings are equal")
5) elif s1<s2:
6) print("First String is less than Second String")
7) else:
8) print("First String is greater than Second String")
Output:
D:\python_classes>py test.py
Enter first string:durga
Enter Second string:durga
Both strings are equal
D:\python_classes>py test.py
Enter first string:durga
Enter Second string:ravi
First String is less than Second String
D:\python_classes>py test.py
Enter first string:durga
Enter Second string:anil
First String is greater than Second String
